<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 超越的主页</title>
    <link>https://chaoyuezhao.github.io/posts/</link>
    <description>Recent content in Posts on 超越的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 29 Jan 2018 17:20:16 +0800</lastBuildDate>
    
	<atom:link href="https://chaoyuezhao.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《JavaScript面向对象精要》学习笔记</title>
      <link>https://chaoyuezhao.github.io/posts/2018/1-29/</link>
      <pubDate>Mon, 29 Jan 2018 17:20:16 +0800</pubDate>
      
      <guid>https://chaoyuezhao.github.io/posts/2018/1-29/</guid>
      <description>麻雀虽小，五脏俱全，这本不到一百页的小册子，真可谓微言大义，不愧对精要二字。
第一章 原始类型和引用类型 一、两种类型  原始类型  通过 var 赋值给一个变量时，原始类型的值直接保存在变量中。
  布尔 （boolean） 数字 （number） 字符串 （string） 空类型 （null） 未定义 （undefined）   引用类型  通过var赋值给一个变量时，变量并不包含该引用类型的值，而是保存了一个指向该引用类型的对象（实例）的指针。js提供了以下这些内建引用类型。）
  Array （数组） Date （日期和时间） Error （错误） Function （函数） Object （通用对象） RegExp （正则表达式）   二、鉴别类型  鉴别原始类型  布尔、数字、字符串、未定义这四个原始类型直接用typeof鉴别，分别返回“boolean”、“number”、&amp;rdquo;string&amp;rdquo;、“undefined”。 空类型需要用三等号与null进行比较 （value === null），返回true就是空类型，false则不是。   鉴别引用类型  鉴别函数直接用typeof，是函数则返回 function 用typeof鉴别非函数的引用类型时，都返回object，无法精确鉴别，所以需要用instanceof来鉴别。（注意：所有引用类型的instanceof Object 都返回true，因为instanceof可以用来鉴别继承类型，所有引用类型都继承自Object。） 鉴别数组还可以直接用Array.isArray(&amp;quot;被鉴别的对象&amp;quot;)来实现，这个方法可以解决不同全局上下文的问题。   三、原始封装类型 这一章的难点在于理解“原始封装类型”，首先要知道，原始类型不是对象，JavaScript为了让原始类型看上去像对象一样（提供一致性体验），做了以下几件事：
 设置了原始封装类型  原始封装类型共有三种：分别是String, Number 和 Boolean，它们都属于“特殊引用类型”。 原始封装类型具有方法，比如String的toLowerCase()、Number的toFixed()、Boolean的toString()，String的方法最多，也最常用。 当读取字符串、数字或布尔值这三种原始类型时，相应的原始封装类型会被自动创建，并创建出一个原始封装类型的实例（对象），在这个实例上自然可以使用相应的原始封装类型的方法。使用结束后，JavaScript会自动销毁这个实例（自动打包）。   原始方法  原始封装类型的创建、生成实例、销毁实例都是在后台执行的，所以表面上看好像是原始类型变成了对象一样可以使用方法。 注意：null和undefined没有方法。   原书的代码例子很好的解释了这个概念：</description>
    </item>
    
    <item>
      <title>Hugo建站心得</title>
      <link>https://chaoyuezhao.github.io/posts/2018/1-25/</link>
      <pubDate>Thu, 25 Jan 2018 22:15:19 +0800</pubDate>
      
      <guid>https://chaoyuezhao.github.io/posts/2018/1-25/</guid>
      <description>Hugo是时下特别流行的静态网站生成器，据统计排名仅次于Jekyll，它使用Go语言开发而成，Hugo最大的特点就是“快”，它的官网上毫不谦虚的炫耀着：“The world&amp;rsquo;s fastest framework for buliding websites&amp;rdquo;。
我是去年11月发现Hugo的，当时对Wordpress已经丧失了最初的激情，随着自己技术的增长，希望能搞一个更好玩的网站，于是开始了解Hugo。不过由于种种原因，直到今年过完元旦我才正式开始研究它，花了两天时间，踩了不少坑，终于算是初步搞定了。下面就记录下我用Hugo建站的过程。
一、快速开始 首先，按照官网上 Quick Start 的步骤走就行，一切正常的话，5分钟就搞定了，
Mac上，打开terminal，按照以下步骤进行：
 安装Hugo
brew install hugo  创建一个新站
hugo new site hugo-blog  增加一个主题（皮肤）
cd hugo-blog; git init; git submodule add https/:github.com/budparr/gohugo-theme-ananke.git themes/ananke;  修改根目录的toml文件。
echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  创建一篇文章，比如first-post.md
hugo new posts/first-post.md  下来就可以搭建一个本地服务器啦，用-D来生成显示草稿（默认新文章都是草稿）
hugo server -D  访问localhost地址，这样就看到网站啦，这里有点小激动，毕竟距离成功已经不远啦。
  小结 如果顺利的话，以上步骤5分钟就可以搞定了，我当时忘记修改config.toml文件里的theme，怎么也无法生成网站。其实手动打开文件输入代码也可以，感觉用terminal反而不习惯。
二、快速部署 Hugo官网推荐了9种部署方式，我使用的是在GitHub上的User Page，步骤如下：
 在GitHub上创建一个repo用来放Hugo的主体文件。比如：
hugo-blog  在GitHub上创建一个自己用户名的repo，我的是:
ChaoyueZhao.github.io  这个repo用来放Hugo生成好的网站文件，利用GitHub自带的网站功能，自动形成repo名的免费网址。</description>
    </item>
    
    <item>
      <title>辞职三个月学习总结</title>
      <link>https://chaoyuezhao.github.io/posts/2017/12-24/</link>
      <pubDate>Sun, 24 Dec 2017 19:35:02 +0800</pubDate>
      
      <guid>https://chaoyuezhao.github.io/posts/2017/12-24/</guid>
      <description>写博客的好处是可以认真反思一下自己。
今天恍然发现，如果从离职开始计算，我完全脱产自学编程已经快4个月了。这段时间到底学了什么？做了什么新项目？先来看看统计数据吧。
 教程：学习了29个在线教程，其中18个已完成，11个未完成。
 书籍：看了8本技术书，其中完成度超过80%的有4本。
 项目：完成了一个静态网页设计；在GitHub开始了一个互联网名人堂翻译项目；开发了一个民国人物纪念网站 安汉纪念馆
  如果我现在还是学生，那么可以说这三个月学习效率还不错。然而现实是，我就快要到而立之年了，而且还打算尽快找到工作，这样看来这三个月的学习根本无法令人满意。目前我面临一个选择：是要继续加强基础知识的学习，还是尽快学习JS框架方便找工作？
这个选择确实不容易做出，如果要加强基础知识的话，是否要从计算机专业的教科书补起？数据结构、算法、编程思想这些都是基础中的基础，但是对于一个自学编程的人来说，也许应该更工作导向一些？随便点开一个网站中招聘前端工程师的岗位要求，几乎必有“熟悉并使用过Angular、React或Vue等框架”。为了找工作有时候还是得妥协，但是这么短的时间怎么可能达到“熟练掌握”或者“精通”？其实找工作、写简历、准备面试也是程序员需要学习的一大领域，慢慢明白这里面的门道很多的，找工作暂且按下不表，先来说说我的选择吧。
我的选择是深入学习JavaScript和CSS3。原因如下，学习了三个多月，发现自己JS用的很少，目前自己做的大多数工作都可以归为“网页设计”，离真正的“网页开发”还很远。主要是因为手写JS代码太少了，大部分时间是在用HTML和CSS，再结合上Bootstrap，偶尔找一些好用的库和API，然而JavaScript才属于前端的编程语言，不深入掌握原生代码，怎么好意思叫自己Web工程师？
另外，随着学习的深入，我发现CSS3真的很博大精深，很多复杂的东西，真正学好并不容易，而网页布局又无法离开它，所以我计划下一步的学习方案是啃下《JavaScript权威指南》和《CSS3权威指南（第四版）英文版》。《JavaScript权威指南》有三分之一都是参考资料，实际上主要内容也就700页左右，英文版的最新CSS3权威指南PDF版有一千七百多页，但是挑实用章节的重点难点看的话，也就一千页左右。我争取今年内把这两本大部头拿下。</description>
    </item>
    
    <item>
      <title>入选互联网名人堂的三位中国人</title>
      <link>https://chaoyuezhao.github.io/posts/2017/10-13/</link>
      <pubDate>Fri, 13 Oct 2017 13:46:56 +0800</pubDate>
      
      <guid>https://chaoyuezhao.github.io/posts/2017/10-13/</guid>
      <description>简介 互联网名人堂（The Internet Hall of Fame）由互联网协会（Internet Society）创建于2012年，目的在于表彰为互联网发展做出杰出贡献的人物，被认为是全球互联网社群的最高荣誉。
互联网名人堂的获奖人分为三类： * 互联网创始人/先驱（Pioneers） * 互联网创新者/改革者（Innovators） * 推动全球互联者（Global Connectors）
除了2015和2016年为了使入选者更多参与进来而暂停2年，互联网名人堂每年公布一次入选名单。
以下是被选入互联网名人堂的三位中国人的官方简介，更多获奖者中文简介请访问我的GitHub仓库Internet-Hall-of-Fame 中文翻译计划
2013年入选推动全球互联者 胡启恒 (Qiheng Hu ) ### 胡启恒女士带领“中国国家计算机与网络设施（NCFC）”工程团队将互联网带进了中国大陆。1994年，身为中国科学院副主席的胡启恒访问了美国国家科学基金会（NSF）并举行了会谈，促成了中国与国际互联网的第一条TCP/IP全功能链接。1997年，她成立了中国互联网络信息中心（CNNIC），并担任其工作委员会主任委员超过10年。这个委员会让企业、政府和学者协作起来支持中国互联网络信息中心的工作，从而管理中国互联网资源的运行和发展。她是中国互联网协会（ISC）理事长，中国互联网协会在胡启恒的帮助下于2001年建立，是一个拥有超过400会员的民间协会。作为中国互联网协会的领导人，胡启恒女士助力于慈善事业的开展，帮助边远贫困地区的学生获得互联网接入和使用互联网应用。
胡启恒女士还投身于国际互联网事务。她是编号分配机构（ICANN）的国际域名委员会和联合国互联网治理工作小组（WGIG）的成员。胡启恒女士在莫斯科受到工业过程自动控制系统专业的工程师教育，之后获得了技术科学副博士学位。她在美国凯斯西储大学担任了两年客座教授。作为中国最早的模式识别和人工智能研究者之一，胡启恒女士现在是中国科学院研究员和中国工程院院士。
2014年入选互联网创新者/改革者 钱华林 (Hualin Qian )
钱华林教授是中国许多大型互联网相关项目的负责人。他带领团队完成了1994年中美最早的一次互联网连接。同一年，他的团队完成了中国顶级域名.cn的建设，他担任该顶级域名的技术和行政联络员。他的团队在1984年开发了中国第一个X.25网络，在1986年开发了中国第一个基于计算机平台的数据/语音/传真系统。钱华林也是1990年亚运会计算机网络和体育应用系统的首席设计师。
自2002年以来，钱华林服务于由中国国家发展与改革委员会成立的一个推动部署中国IPv6的专家委员会。作为专家组的一员，他从2007年开始监督指导由中国科技部支持的基础研究项目。 他也是计算机与网络技术期刊的编委会成员。
目前，钱华林担任中国互联网络信息中心（CNNIC）首席科学家，中国科学院研究员，也是CNNIC指导委员会的成员。
2017年入选推动全球互联者 吴建平 (Jianping Wu )
吴建平博士在促进中国和亚太地区互联网技术、部署以及教育方面扮演了先锋式的角色，并帮助中国和亚太地区提高了在全球互联网中的地位，增强了相互的联系。
自1994年开始，他领导了中国第一个网际网络主干CERNET（中国教育和科研计算机网）的设计、开发和改进的工作，使之成为全国最大的学术网络。他也是推动和部署中国IPv6的一位领导者，提出了中国下一代互联网示范工程（China Next Generation Internet Project）来促进中国下一代网际网络主干的开发，并领导了中国第一个大型IPv6网际网络主干和世界上最大的native IPv6网络之一的CNGI-CERNET2（“中国下一代互联网示范工程-第二代中国教育和科研计算机网）的开发。
他坚持不懈地鼓励中国的科学家参与国际互联网的开发工作，对亚太地区和欧亚大陆开发先进的网络起到了重要的作用。
他是清华大学计算机技术与科学系教授和主任，中国工程院院士。</description>
    </item>
    
    <item>
      <title>如何成为一名程序员——善用搜索的艺术</title>
      <link>https://chaoyuezhao.github.io/posts/2017/8-31/</link>
      <pubDate>Thu, 31 Aug 2017 23:39:38 +0800</pubDate>
      
      <guid>https://chaoyuezhao.github.io/posts/2017/8-31/</guid>
      <description>大四秋季学期的我，正经历着严重的自信心不足的问题。我慢慢明白自己并不希望成为一名学术研究人员。统计学让我很头大，永无止境且枯燥的学术研究让我倍感无聊。我是那种成果导向的人，喜欢实实在在的产品，并有规定的截止日期，具有二元性：成功或者失败。进入大学的最后一年，我又有了新的感悟。我学习的所有技能都是为做研究服务的，如果我不打算从事学术研究，那么……我将一无所有！
在美国的文理学院（liberal arts college）主修计算机科学并不意味着你就是一名“黑客”。你可以简单的将它比喻为：在不同的部门购物。第一次在一个计算机入门课里看到command line，你发现你喜欢使用它。也可以意味着，你将要选择一两个编程语言，也许在你拿到学位的时候，你会写你自己的shell，创建你自己的解释器，甚至从头设计一个数据库系统。文理学校计算机科学专业为你提供了研究计算机科学的必备的条件，但这与软件工程区别很大。就像比较一个理疗师与一个运动员一样。当然，理疗师知道你拉伤了哪一块肌肉，知道如何更好地保护你的身体，但是你无法让他们替代运动员上场比赛。作为我们学校一名计算机科学专业的学生，当然，我学习了计算机语言的结构和解释，可是我从没有听过“前端工程师”或“全栈”这些词。架构设计是什么？从没听过Xcode，git是不是用来确保你的同伴可以访问你已经写好的代码的？框架？你是否只需要HTML和JavaScript？API到底是什么鬼？
一个接一个的招聘岗位要求iOS或Android编程经验，或者自己设计的网页清单。这些我一样都没有，坦率地讲，我甚至不知道该从哪里开始。我没有出生在一个科技背景的家庭，我爸爸还不会打字。我怀疑我的兄弟们是否精通什么技术。我妈妈仍然在等我放假回家给她MP3里拷贝新的音乐。我可以在网上选几个教程，但我如何能弥补我与那些人的差距？那些上过科技高中的人？或者他们父母都是搞软件开发的人？或者那些有自己的服务器的人？还有那些7年级就黑了自己中学电脑系统的人？我要怎么和那些有科技特权的人竞争？
我找了一个和计算机科学不相关的工作。建议拥有Bash的知识，但是不强求。更坏的是，我放弃了这个工作。我的Python编程经验让我能够胜过那些IT咨询台岗位的应聘者。我经历过帮助老人用电脑。我至少应该找到一个工作，那才像样。
 剧透：我有一份谷歌的工作邀请。
 在我大四那年的九月中旬，所有事情都开始改变了：不知怎么，我成了上面说过的那些人的朋友。
最初我没把这位朋友放太当回事。我第一次见他，他正在编写代码挖掘Craigslist中所有免费的家具的列表（顺便提一句，这是违法的）。那时候，我甚至不知道数据挖掘是什么。之后碰到了黑客松（hackathon）。我一直想去，但是我一直没有参加过的朋友，而且我无法自己参加。我什么都不懂。谁愿意带上一个像我一样没用的人？但是我还是害羞地问我这个朋友是否能带我去——只是旁观——了解到我将会对他们完全没用——他笑了，说他明白，然后我们就去了。
他是我脑海中一个有能力的黑客的最佳例子。最牛逼的是，他用从没用过的工具把各种东西组织到一
起。是的，他在网上搜索花的时间比他写代码的时间多，但是通过网上搜索和之前对这方面的基本了解，他完成了一个相当复杂的App。他知道Twilio属于哪一级，知道在哪里应用它，甚至没有之前的知识，他也能把事情办好。
我绝望了。他是怎么变得这么厉害能无中生有把事情搞定的？
我郁闷地度过了这学期剩下的时间，到了冬天，我又开始恐慌了。为了能让自己找到工作，我试着学了一些Code Academy的编程课程。嗯，还不错。我尝试做了自己第一个网页，很糟糕，只有一个静止页面，满是盒子和恶心的配色，不过也算回事。我明白了，就像我的那些编程好的朋友，当我遇到问题的时候，我所需要做的就是……谷歌一下。
“如何在CSS中把一个div居中？”“如何在HTML中平铺背景图片？”“如何链接一个PDF？”有时候一个很简单的问题要花好几个小时才能搞定，但是我开始明白答案就在那里。所以我继续坚持这样做。没过多久，我已经足够自信地开始尝试做小项目了—从我们学校网站挖掘数据制作一个自动平均成绩计算器。哈哈，我成功了！还不懒！对吧？就像这样，我开始一步一步自信起来。
 一点建议：如果你刚开始编程，我建议你从JavaScript/HTML/CSS开始，因为网上有很多关于他们的帮助文件和问答。你很可能发现网上有人已经完成了你想做的事情。还有，完成几个在线课程吧。即使他们看起来没什么效果，最起码他们能教会你那些你谷歌搜索时候必须要知道的名词。
 受到这次小小成功的鼓励，我召集了一群志同道合的同学（同样没有软件开发经验的朋友）一起参加我的第二次黑客松。就在这里，我再次顿悟了：原来我懂得比我的朋友多。突然间，我成了一个专家。我可以掌握这门语言，我知道需要做什么，知道事情应该朝哪个方向进行。距离我随机做了几个在线课程仅仅过了两周，人们已经开始认为我比他们更能干了。当然，我离那些真正有能力的朋友还差得很远，但是我慢慢开始明白，我与他们的差距也许正如我同学与我的差距一样。
真的，就是这样！
我在一个软件开发公司参加了一个暑期实习。我对我的编程能力比之前更加有信心了，但是我需要确信我具有了能以此为业的能力。因此我捡起了iOS开发、Ruby on Rails和Angular。我可以让蓝牙设备在手机上进行各种操作。我熟悉了git，与Cordova进行了亲密对话，学会了Heroku，我甚至涉猎了一些Android开发。然而最重要的是，我知道经验固然重要，却不是全部。差距不是无法克服的，因为我可以学习。
说真的，如果没有软件开发的知识我也许同样能够通过谷歌的面试。一个扎实的计算机科学知识背景是他们所想要的，我的学校给了我这些。但是我从来没想过去谷歌应聘。显然我没有那条件。
我花了很长时间才明白，我错了。
成为一名软件开发者的壁垒是真实存在的。生于软件开发家庭，或者很早就接触编程的人们具有这样的自信：这让让他们乐于处理新鲜事物并保持学习。而在我们眼里，他们只是变得越来越强。去年，我看到了这个差距，我放弃了。但是我们所需要的仅仅是不要绝望。重要的并不是我们已经知道的，而是我们应该如何学习。是那种一直坐在电脑前想办法解决问题的坚毅的精神、是仔细研究每一行代码知道你明白是怎么回事的态度，是关于搜索方法、例子和错误，直到一切开始变得有意义的过程。
剩下的东西，自然会来到。
原文地址</description>
    </item>
    
    <item>
      <title>如何转行做编程</title>
      <link>https://chaoyuezhao.github.io/posts/2017/5-26/</link>
      <pubDate>Fri, 26 May 2017 23:50:04 +0800</pubDate>
      
      <guid>https://chaoyuezhao.github.io/posts/2017/5-26/</guid>
      <description>转行进入科技和编程行业可能是所有职业变化里最大的一个了，然而，这并不让我感到意外。试想还有哪个行业能让你做喜欢的事还能得到工资？还有哪个行业能够让你在开发改变人们生活和工作的产品时得到满足感？这是一个非常值得进入的行业，何况它提供的报酬也不低！
也许这是因为程序员是少数几个你可以自学成才的职业。我可以想象一个熟练使用Excel的会计开始考虑转行到编程。我自己就认识机械工程师、会计、甚至医生，成功转行为程序员，并且非常喜爱他们的职业。这在几十年前是无法想象的，大多数人用他们一生的时间从事他们曾经学过的领域的工作。事实上，我们正在快速地进入一个自学者将被宠坏的时代。现在我们有网上课程、有YouTube视频、有提供练习的在线编程环境、有你可以问问题的论坛、还有你可以直接上手并成为真正的贡献者开源项目。所有编程学习者需要的资源都已经到位了，而你所需要的仅仅是时间、纪律、动力和一个好的计划。
如果你是那种喜欢一头扎进深水中然后努力找出路的人，那么你可能不太需要考虑学习计划，但是我个人认为计划是非常重要的。编程的领域很庞大，满载各种不同的选择，因而你迈出的每一步都需要做出决策，没有计划很容易迷失。学习计划并不需要特别复杂和一成不变，有一个计划能够让你活得更简单，允许你把注意力集中在学习上。
如何在几大编程领域进行选择？ 编程有几个主要的领域。虽然好的开发者可以在各个领域之间转换，但是在初学阶段，最好还是集中在一个领域，锻炼自己的技能。就像摄影师选择他们要拍摄的对象一样，是拍摄野生动物？城市生活？还是拍摄模特？这里涉及到很多不同的微妙技能。鉴于培养这些技能需要时间，所以最好能专注于一项，让你做的事情更加专业。
很广泛地说，编程有几大分类：Web开发、移动开发、企业开发（enterprise development）、系统编程、还有嵌入式开发。当然还有一些别的，但是这些是最常见的。
我对那些正在进入软件开发行业的朋友的建议是去选择那些你能够在一年以内学会并开始真正做项目的领域。我认为最好的领域，是移动和Web开发。这两个都能在一年之内学会，而且还能提供一个相当广阔的工作机会。当你学完了移动开发，你可以自己当老板开发你自己的APP，或者当一个自由职业者给其他企业开发APP，或者走传统的就业模式。Web开发者同样也有相似的选择。
我没有推荐企业开发，因为企业开发很难自学，而且这个领域大部分工作需要大学的相关学位。嵌入式开发的确支持独立工作，你能找到一个不需要大学学历的工作，但是嵌入式开发的学习曲线特别高，比移动和Web开发高了太多。
如果我要转行到编程，我将会选择进入我刚刚建议的领域：移动开发和Web开发。
###选择开发栈（Development Stack）
移动或者Web开发并不是你的最终选择。每个领域都包含了一些相互竞争的技术。就连经验丰富的开发者也会发现掌握所有技术会非常困难。作为一个新手，你应该在涉猎该领域其他技术之前，选择一个单独的技术然后专注地去彻底掌握它。
移动开发人员需要在两个最流行的平台做出选择：Android 和 iOS。这不是仅有的两个，也有其他的，但是 鉴于Android和iOS组成了移动开发项目的大部分，选择其中一个肯定不会有错。
另一方面，Web开发人员需要选择一个重要的编程语言和一个Web开发框架。有一个相当长的流行编程语言的列表供你选择。目前最流行的语言有：Python，JavaScript，Ruby，Java，C#，PHP，Go-Lang，和一些其他的。我的建议是选择Python，Ruby或者JavaScript作为开始。许多大学的编程课程已经把Java换成了Python。这是一个好的选择，被很多人赞同，所以你可以跟随他们的选择，你不会走错。另一个关于语言的事是编程语言自己的社区，这些社区认可技术而非学历。这表示如果你有技术而没有学历，你可以很容易的在这些社区中找到工作。对于PHP来说也是一样，不过我发现使用这门语言的项目缺少设计严谨性和设计思路。我不是想说PHP的坏话，我很确定很多PHP项目具有高等级的工程严谨性，但是就我看到的来说，不严谨的PHP项目要比Python，Ruby或者Node+JavaScript的项目多得多。一旦你选好了语言，你就需要为这个语言选择一个好的框架。目前我想要尽量保持做简单的选择，因为关于所有语言中各种框架的详尽处理方式不在本文的讨论范围之内。
你还需要做出一些其他的选择，选择操作系统、数据库和开发环境。你可以随意选择你最熟悉的操作系统：Windows，Mac，或者Linux。当你考虑到数据库的时候，移动开发人员的选择是自动生成的（特定的技术也会决定数据库）。不过，Web开发人员可以数据库的选择却非常的多。我将再次省略掉细节讨论，直接推荐使用Postgres!
最后，你必须选择一个开发环境（version control，IDE，以及其他）。在这里我不做任何推荐，因为之后去改变也不是很难，而且当你开始上手以后，很可能想要去试验不同的工具。去做点网络搜索，选择任何一个简单给力的就可以开始了。
制定一个学习计划！ 当你选好了编程领域和开发栈，你知道现在你必须尽快熟悉这个领域，即使这是一个相当大的领域。最简单的起步方法是多与该领域的朋友沟通，请他们多指导你。你也可以在网上请别人指导你。有一些论坛，有经验的开发者很乐于给你提供指导建议。你可以试着在reddit.com上提问。
你可能会得到很多建议，有时候他们看起来相互矛盾。但是，这是预料当中的。人们会建议对他们最管用的东西。它们都是不同的方法，没有绝对的好与坏，你必须自己找到最适合你的。
制定学习计划需要用到一点自我反思的能力。你必须知道怎么学习对你最有效，然后制定一个相应的计划。
当你对学习有了一个清晰的思路，你会发现有众多的学习课程、视频、书籍和能练习编程的地方。用最合适的资源来开始吧，记着要不断进行微调。
结论 我希望这篇博文已经讲述了自学编程的可能性。我必须在这篇文章中保持一种简要的讨论风格，因为详细的内容会超出这篇文章的范围。我在这篇文章中非常想要传达的思想是，你完全可以通过自学来转行到编程这一领域，不需要拥有正式的计算机科学学位。
原文地址</description>
    </item>
    
  </channel>
</rss>